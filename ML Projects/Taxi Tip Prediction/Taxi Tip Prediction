{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPhW/IQSXfqPtZVn7vAC30L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Import Libraries"],"metadata":{"id":"i3IyuempPd1K"}},{"cell_type":"code","execution_count":12,"metadata":{"id":"G2ScGPaTPZDP","executionInfo":{"status":"ok","timestamp":1679575575126,"user_tz":-120,"elapsed":971,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}}},"outputs":[],"source":["from __future__ import print_function\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import normalize, StandardScaler, MinMaxScaler\n","from sklearn.utils.class_weight import compute_sample_weight\n","from sklearn.metrics import mean_squared_error, r2_score\n","import time\n","import warnings\n","import gc, sys\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","source":["## Data Analysis"],"metadata":{"id":"sUGvgE6UPtXG"}},{"cell_type":"code","source":["raw_data = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%203/data/yellow_tripdata_2019-06.csv')\n","print(\"There are \" + str(len(raw_data)) + \" observations in the dataset.\")\n","print(\"There are \" + str(len(raw_data.columns)) + \" variables in the dataset.\")\n","\n","raw_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":305},"id":"IdySj4M9PqNu","executionInfo":{"status":"ok","timestamp":1679574729603,"user_tz":-120,"elapsed":19242,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"ab724543-b8ec-4756-903b-bd5b638f737c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 3936004 observations in the dataset.\n","There are 18 variables in the dataset.\n"]},{"output_type":"execute_result","data":{"text/plain":["   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n","0         1  2019-06-01 00:55:13   2019-06-01 00:56:17              1.0   \n","1         1  2019-06-01 00:06:31   2019-06-01 00:06:52              1.0   \n","2         1  2019-06-01 00:17:05   2019-06-01 00:36:38              1.0   \n","3         1  2019-06-01 00:59:02   2019-06-01 00:59:12              0.0   \n","4         1  2019-06-01 00:03:25   2019-06-01 00:15:42              1.0   \n","\n","   trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\n","0            0.0         1.0                  N         145.0         145.0   \n","1            0.0         1.0                  N         262.0         263.0   \n","2            4.4         1.0                  N          74.0           7.0   \n","3            0.8         1.0                  N         145.0         145.0   \n","4            1.7         1.0                  N         113.0         148.0   \n","\n","   payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n","0           2.0          3.0    0.5      0.5        0.00           0.0   \n","1           2.0          2.5    3.0      0.5        0.00           0.0   \n","2           2.0         17.5    0.5      0.5        0.00           0.0   \n","3           2.0          2.5    1.0      0.5        0.00           0.0   \n","4           1.0          9.5    3.0      0.5        2.65           0.0   \n","\n","   improvement_surcharge  total_amount  congestion_surcharge  \n","0                    0.3          4.30                   0.0  \n","1                    0.3          6.30                   2.5  \n","2                    0.3         18.80                   0.0  \n","3                    0.3          4.30                   0.0  \n","4                    0.3         15.95                   2.5  "],"text/html":["\n","  <div id=\"df-1b558f5d-fa0b-4f4b-9460-0793a2354050\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>VendorID</th>\n","      <th>tpep_pickup_datetime</th>\n","      <th>tpep_dropoff_datetime</th>\n","      <th>passenger_count</th>\n","      <th>trip_distance</th>\n","      <th>RatecodeID</th>\n","      <th>store_and_fwd_flag</th>\n","      <th>PULocationID</th>\n","      <th>DOLocationID</th>\n","      <th>payment_type</th>\n","      <th>fare_amount</th>\n","      <th>extra</th>\n","      <th>mta_tax</th>\n","      <th>tip_amount</th>\n","      <th>tolls_amount</th>\n","      <th>improvement_surcharge</th>\n","      <th>total_amount</th>\n","      <th>congestion_surcharge</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:55:13</td>\n","      <td>2019-06-01 00:56:17</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>145.0</td>\n","      <td>145.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>4.30</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:06:31</td>\n","      <td>2019-06-01 00:06:52</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>262.0</td>\n","      <td>263.0</td>\n","      <td>2.0</td>\n","      <td>2.5</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>6.30</td>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:17:05</td>\n","      <td>2019-06-01 00:36:38</td>\n","      <td>1.0</td>\n","      <td>4.4</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>74.0</td>\n","      <td>7.0</td>\n","      <td>2.0</td>\n","      <td>17.5</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>18.80</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:59:02</td>\n","      <td>2019-06-01 00:59:12</td>\n","      <td>0.0</td>\n","      <td>0.8</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>145.0</td>\n","      <td>145.0</td>\n","      <td>2.0</td>\n","      <td>2.5</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>4.30</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:03:25</td>\n","      <td>2019-06-01 00:15:42</td>\n","      <td>1.0</td>\n","      <td>1.7</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>113.0</td>\n","      <td>148.0</td>\n","      <td>1.0</td>\n","      <td>9.5</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>2.65</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>15.95</td>\n","      <td>2.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b558f5d-fa0b-4f4b-9460-0793a2354050')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1b558f5d-fa0b-4f4b-9460-0793a2354050 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1b558f5d-fa0b-4f4b-9460-0793a2354050');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["raw_data=raw_data.head(1000000)"],"metadata":{"id":"i5NhSaJCZd1I","executionInfo":{"status":"ok","timestamp":1679574729604,"user_tz":-120,"elapsed":7,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["raw_data = raw_data[raw_data['tip_amount'] > 0]\n","\n","# we also remove some outliers, namely those where the tip was larger than the fare cost\n","raw_data = raw_data[(raw_data['tip_amount'] <= raw_data['fare_amount'])]\n","\n","# we remove trips with very large fare cost\n","raw_data = raw_data[((raw_data['fare_amount'] >=2) & (raw_data['fare_amount'] < 200))]\n","\n","# we drop variables that include the target variable in it, namely the total_amount\n","clean_data = raw_data.drop(['total_amount'], axis=1)\n","\n","# release memory occupied by raw_data as we do not need it anymore\n","# we are dealing with a large dataset, thus we need to make sure we do not run out of memory\n","del raw_data\n","gc.collect()\n","\n","# print the number of trips left in the dataset\n","print(\"There are \" + str(len(clean_data)) + \" observations in the dataset.\")\n","print(\"There are \" + str(len(clean_data.columns)) + \" variables in the dataset.\")\n","\n","plt.hist(clean_data.tip_amount.values, 16, histtype='bar', facecolor='g')\n","plt.show()\n","\n","print(\"Minimum amount value is \", np.min(clean_data.tip_amount.values))\n","print(\"Maximum amount value is \", np.max(clean_data.tip_amount.values))\n","print(\"90% of the trips have a tip amount less or equal than \", np.percentile(clean_data.tip_amount.values, 90))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"id":"IBcUxJ9xQT9l","executionInfo":{"status":"ok","timestamp":1679574730089,"user_tz":-120,"elapsed":492,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"f4ad09db-e466-4d92-8241-a463a2de2e9e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 682536 observations in the dataset.\n","There are 17 variables in the dataset.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Minimum amount value is  0.01\n","Maximum amount value is  91.0\n","90% of the trips have a tip amount less or equal than  5.88\n"]}]},{"cell_type":"code","source":["clean_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"mX181T13QVY8","executionInfo":{"status":"ok","timestamp":1679574730090,"user_tz":-120,"elapsed":15,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"baf1dde4-d047-4c4c-fd4b-1917bc148f60"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n","4          1  2019-06-01 00:03:25   2019-06-01 00:15:42              1.0   \n","5          1  2019-06-01 00:28:31   2019-06-01 00:39:23              2.0   \n","7          1  2019-06-01 00:54:49   2019-06-01 01:02:57              2.0   \n","9          1  2019-06-01 00:29:12   2019-06-01 01:03:13              1.0   \n","10         2  2019-06-01 00:01:48   2019-06-01 00:16:06              1.0   \n","\n","    trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\n","4            1.70         1.0                  N         113.0         148.0   \n","5            1.60         1.0                  N          79.0         125.0   \n","7            1.20         1.0                  N          79.0         249.0   \n","9            8.60         1.0                  N         186.0         243.0   \n","10           1.74         1.0                  N         107.0         148.0   \n","\n","    payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n","4            1.0          9.5    3.0      0.5        2.65           0.0   \n","5            1.0          9.5    3.0      0.5        1.00           0.0   \n","7            1.0          7.5    3.0      0.5        1.00           0.0   \n","9            1.0         31.5    3.0      0.5        7.05           0.0   \n","10           1.0         11.0    0.5      0.5        2.96           0.0   \n","\n","    improvement_surcharge  congestion_surcharge  \n","4                     0.3                   2.5  \n","5                     0.3                   2.5  \n","7                     0.3                   2.5  \n","9                     0.3                   2.5  \n","10                    0.3                   2.5  "],"text/html":["\n","  <div id=\"df-65ca54b4-1085-40ee-96a9-187a565b2445\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>VendorID</th>\n","      <th>tpep_pickup_datetime</th>\n","      <th>tpep_dropoff_datetime</th>\n","      <th>passenger_count</th>\n","      <th>trip_distance</th>\n","      <th>RatecodeID</th>\n","      <th>store_and_fwd_flag</th>\n","      <th>PULocationID</th>\n","      <th>DOLocationID</th>\n","      <th>payment_type</th>\n","      <th>fare_amount</th>\n","      <th>extra</th>\n","      <th>mta_tax</th>\n","      <th>tip_amount</th>\n","      <th>tolls_amount</th>\n","      <th>improvement_surcharge</th>\n","      <th>congestion_surcharge</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:03:25</td>\n","      <td>2019-06-01 00:15:42</td>\n","      <td>1.0</td>\n","      <td>1.70</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>113.0</td>\n","      <td>148.0</td>\n","      <td>1.0</td>\n","      <td>9.5</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>2.65</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:28:31</td>\n","      <td>2019-06-01 00:39:23</td>\n","      <td>2.0</td>\n","      <td>1.60</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>79.0</td>\n","      <td>125.0</td>\n","      <td>1.0</td>\n","      <td>9.5</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>1.00</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:54:49</td>\n","      <td>2019-06-01 01:02:57</td>\n","      <td>2.0</td>\n","      <td>1.20</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>79.0</td>\n","      <td>249.0</td>\n","      <td>1.0</td>\n","      <td>7.5</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>1.00</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>2019-06-01 00:29:12</td>\n","      <td>2019-06-01 01:03:13</td>\n","      <td>1.0</td>\n","      <td>8.60</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>186.0</td>\n","      <td>243.0</td>\n","      <td>1.0</td>\n","      <td>31.5</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>7.05</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>2</td>\n","      <td>2019-06-01 00:01:48</td>\n","      <td>2019-06-01 00:16:06</td>\n","      <td>1.0</td>\n","      <td>1.74</td>\n","      <td>1.0</td>\n","      <td>N</td>\n","      <td>107.0</td>\n","      <td>148.0</td>\n","      <td>1.0</td>\n","      <td>11.0</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>2.96</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>2.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65ca54b4-1085-40ee-96a9-187a565b2445')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-65ca54b4-1085-40ee-96a9-187a565b2445 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-65ca54b4-1085-40ee-96a9-187a565b2445');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["## Data Preprocessing"],"metadata":{"id":"ALqf7tBhQd5a"}},{"cell_type":"code","source":["clean_data['tpep_dropoff_datetime'] = pd.to_datetime(clean_data['tpep_dropoff_datetime'])\n","clean_data['tpep_pickup_datetime'] = pd.to_datetime(clean_data['tpep_pickup_datetime'])\n","\n","# extract pickup and dropoff hour\n","clean_data['pickup_hour'] = clean_data['tpep_pickup_datetime'].dt.hour\n","clean_data['dropoff_hour'] = clean_data['tpep_dropoff_datetime'].dt.hour\n","\n","# extract pickup and dropoff day of week\n","clean_data['pickup_day'] = clean_data['tpep_pickup_datetime'].dt.weekday\n","clean_data['dropoff_day'] = clean_data['tpep_dropoff_datetime'].dt.weekday\n","\n","# compute trip time in minutes\n","clean_data['trip_time'] = (clean_data['tpep_dropoff_datetime'] - clean_data['tpep_pickup_datetime']).astype('timedelta64[m]')\n","\n","clean_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WpCj_GIWQYLB","executionInfo":{"status":"ok","timestamp":1679574731223,"user_tz":-120,"elapsed":1144,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"1d90e6db-02d0-40bc-c2ee-dab60403f119"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(682536, 22)"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# drop the pickup and dropoff datetimes\n","clean_data = clean_data.drop(['tpep_pickup_datetime', 'tpep_dropoff_datetime'], axis=1)\n","\n","# some features are categorical, we need to encode them\n","get_dummy_col = [\"VendorID\",\"RatecodeID\",\"store_and_fwd_flag\",\"PULocationID\", \"DOLocationID\",\"payment_type\", \"pickup_hour\", \"dropoff_hour\", \"pickup_day\", \"dropoff_day\"]\n","proc_data = pd.get_dummies(clean_data, columns = get_dummy_col)\n","\n","# release memory occupied by clean_data as we do not need it anymore\n","# we are dealing with a large dataset, thus we need to make sure we do not run out of memory\n","del clean_data\n","gc.collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5n-qpeXcWmtx","executionInfo":{"status":"ok","timestamp":1679574733858,"user_tz":-120,"elapsed":2636,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"67a49005-1903-4e81-e752-fb75f626152b"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4062"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# extract the labels from the dataframe\n","y = proc_data[['tip_amount']].values.astype('float32')\n","\n","# drop the target variable from the feature matrix\n","proc_data = proc_data.drop(['tip_amount'], axis=1)\n","\n","# get the feature matrix used for training\n","X = proc_data.values\n","\n","# normalize the feature matrix\n","X = normalize(X, axis=1, norm='l1', copy=False)\n","\n","print('X.shape=', X.shape, 'y.shape=', y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2dnKcoKFWtLy","executionInfo":{"status":"ok","timestamp":1679574738497,"user_tz":-120,"elapsed":4641,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"db578f0d-bb5c-4b27-b0ca-178a6c238f7f"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["X.shape= (682536, 561) y.shape= (682536, 1)\n"]}]},{"cell_type":"markdown","source":["## Data Train/Test Split"],"metadata":{"id":"piCmKNfJW_48"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","print('X_train.shape =', X_train.shape, 'Y_train.shape =', y_train.shape)\n","print('X_test.shape =', X_test.shape, 'Y_test.shape =', y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V6NATXTjW8Kc","executionInfo":{"status":"ok","timestamp":1679575796072,"user_tz":-120,"elapsed":14373,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"cc70c78b-3b71-48e1-bf8a-3e288bebbd36"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train.shape= (546028, 561) Y_train.shape= (546028, 1)\n","X_test.shape= (136508, 561) Y_test.shape= (136508, 1)\n"]}]},{"cell_type":"markdown","source":["## Build a Decision Tree Regressor model"],"metadata":{"id":"BZjLrjVoXLw7"}},{"cell_type":"code","source":["sklearn_dt = DecisionTreeRegressor(max_depth=8, random_state=35)\n","sklearn_dt.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"6xf3eGE4XG7P","executionInfo":{"status":"ok","timestamp":1679575840056,"user_tz":-120,"elapsed":38509,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"6f245620-a998-4a16-b29f-3861cbc6e0d6"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(max_depth=8, random_state=35)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(max_depth=8, random_state=35)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(max_depth=8, random_state=35)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["## Evaluate Model"],"metadata":{"id":"aG9RBa75X4JR"}},{"cell_type":"code","source":["sklearn_pred = sklearn_dt.predict(X_test)\n","\n","sklearn_mse = mean_squared_error(y_test, sklearn_pred)\n","r2 = r2_score(y_test, sklearn_pred)\n","print('MSE score : {0:.3f}'.format(sklearn_mse))\n","print('R2 score : {0:.3f}'.format(r2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TV_X501fXdHL","executionInfo":{"status":"ok","timestamp":1679575847139,"user_tz":-120,"elapsed":282,"user":{"displayName":"Abdullah Khaled","userId":"00629925268493340891"}},"outputId":"007e9326-6988-4666-ad81-7616a9565ab2"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE score : 1.720\n","R2 score : 0.762\n"]}]}]}